alias watch='watch '
alias ls='ls --color=auto'
alias grep='grep --color=always --exclude-dir=\*.svn\*'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias nose='nosetests -sxv --with-doctest'
alias is='ssh -l root'
alias tmux="tmux -2"
alias nm-applet-i3="i3-msg exec nm-applet"

alias git-clean='git pull --rebase && git pull --prune && git branch --merged | grep -v "\*" | xargs -n 1 git branch -d'
alias git-branch='echo ''${$(git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD)#(refs/heads/|tags/)}'''
alias git-open-mr='git push -u origin $(git-branch)'
alias fuckme='git pull --rebase && git commit --amend --no-edit && git push -f'

function git-black() {
  git status --short | grep --color=never '.py$' | awk '{print $2}' | xargs isort
  git status --short | grep --color=never '.py$' | awk '{print $2}' | xargs black
}

function git-black-master() {
  git diff --name-only  master | grep --color=never '.py$' | xargs isort
  git diff --name-only  master | grep --color=never '.py$' | xargs black
}

function git-co() {
  git branch | grep --color=never $1 | xargs git checkout
}

alias vi=/bin/nvim
alias vim=/bin/nvim

zed() {
  if rg -q --no-messages poetry pyproject.toml; then
    poetry run zeditor "$@"
  else
    zeditor "$@"
  fi
}

alias docker-compose='docker compose'
alias dc='docker compose'
alias dc-images='dc config --services | sort'
alias docker-kill-all='docker kill $(docker ps -q)'
alias docker-purge='docker rm $(docker ps -a -q)'
alias docker-purge-i='docker rmi $(docker images -q -f dangling=true)'
# alias docker-purge-all='docker rmi $(docker images -q)'
alias docker-clean="docker-kill-all || true && docker-purge"
alias docker-stats='docker stats $(docker ps -q)'


function docker-reset() {
  systemctl stop docker.service
  systemctl stop docker.socket
  for i in $(btrfs subvolume list /var/lib/docker | grep docker | awk '{print "/"$9}'); do
    btrfs subvolume delete $i
  done
  rm -rf /var/lib/docker/*
  systemctl start docker
}

function dc-respawn() {
  for container in $@; do
    dc stop $container && dc rm -f $container && dc up -d $container
  done
  dc logs -f $@
}

function dc-ip() {
  for container in $@; do
    echo -n "$container: "
    docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$(basename $(pwd))_${container}_1"
  done
}


function recordmywindow() {
    xwininfo | {
        while IFS=: read -r k v; do
            case "$k" in
            *"Absolute upper-left X"*) x=$v;;
            *"Absolute upper-left Y"*) y=$v;;
            *"Border width"*) bw=$v ;;
            *"Width"*) w=$v;;
            *"Height"*) h=$v;;
            esac
        done

        # Generate a unique filename
        base_filename="screenrecord"
        extension=".mp4"
        counter=1
        filename="${base_filename}${extension}"
        while [[ -e "$filename" ]]; do
            filename="${base_filename}_${counter}${extension}"
            ((counter++))
        done
        echo "Start recording to $filename in"
        for i in 3 2 1; do echo "$i"; sleep 1; done
        ffmpeg  -y -f x11grab -framerate 25 \
            -video_size "$((w))x$((h))" \
            -i "+$((x+bw)),$((y+bw))" \
            -c:v libx264 $filename
    }
}

# alias neomutt-dark='ln -s ~/.config/neomutt/color.dark ~/.config/neomutt/color && neomutt'
# alias neomutt-light='ln -s ~/.config/neomutt/color.light ~/.config/neomutt/color && neomutt'
